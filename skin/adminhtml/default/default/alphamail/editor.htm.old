<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <script src="http://amail.io/js/jquery.js" type="text/javascript" language="javascript"></script>
    <script src="messagebox.js" type="text/javascript" language="javascript"></script>
    
    <link href="alohaeditor/css/aloha.css" type="text/css" rel="stylesheet" />

    <script>
        var Aloha = window.Aloha || ( window.Aloha = {} );
        Aloha.settings = {
            locale: 'sv',
            plugins: {
                format: {
                    config : [ 'b', 'i', 'del' ]
                },
                list: {
                    config : [ 'ul' ]
                },
                link: {
                    config : [ 'a' ]
                }
            },
            sidebar: {
                disabled: true
            },
			floatingmenu: {
				width: 250
			}
        };
    </script>

    <script type="text/javascript" src="alohaeditor/lib/aloha.js"
                data-aloha-plugins="common/format,
                                common/list,
                                common/link,
                                common/block,
                                common/undo,
                                common/contenthandler,
                                common/paste,
                                common/commands,
                                extra/browser"></script>
    <style>
        body {
            width: 100%; 
            margin-left: 0px; 
            margin-top: 0px; 
            margin-bottom: 0px; 
            background-color: #f8f8f8;
        }

        .comlang-block {
            padding: 0px;
            padding-left: 20px;
            width: 100%;
            height: 16px;
            min-width: 16px;
            border: 1px dashed yellow;
            border-radius: 4px;
            max-width: 600px;
            cursor: pointer;
        }

        .angled {
            background-color: #1AC6EB;
            background-image: -webkit-gradient(linear, 0 100%, 100% 0,
                                    color-stop(.25, rgba(255, 255, 255, .2)), color-stop(.25, transparent),
                                    color-stop(.5, transparent), color-stop(.5, rgba(255, 255, 255, .2)),
                                    color-stop(.75, rgba(255, 255, 255, .2)), color-stop(.75, transparent),
                                    to(transparent));
            background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .2) 25%, transparent 25%,
                                transparent 50%, rgba(255, 255, 255, .2) 50%, rgba(255, 255, 255, .2) 75%,
                                transparent 75%, transparent);
            background-image: -moz-linear-gradient(45deg, rgba(255, 255, 255, .2) 25%, transparent 25%,
                                transparent 50%, rgba(255, 255, 255, .2) 50%, rgba(255, 255, 255, .2) 75%,
                                transparent 75%, transparent);
            background-image: -ms-linear-gradient(45deg, rgba(255, 255, 255, .2) 25%, transparent 25%,
                                transparent 50%, rgba(255, 255, 255, .2) 50%, rgba(255, 255, 255, .2) 75%,
                                transparent 75%, transparent);
            background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, .2) 25%, transparent 25%,
                                transparent 50%, rgba(255, 255, 255, .2) 50%, rgba(255, 255, 255, .2) 75%,
                                transparent 75%, transparent);
            background-image: linear-gradient(45deg, rgba(255, 255, 255, .2) 25%, transparent 25%,
                                transparent 50%, rgba(255, 255, 255, .2) 50%, rgba(255, 255, 255, .2) 75%,
                                transparent 75%, transparent);
            -webkit-background-size: 20px 20px;
            background-size: 20px 20px;
        }
    </style>
</head>
<body>

<div id="content" style="width: 100%; height: 100%;">
</div>
<textarea id="txt" style="display: none;"></textarea>

<script>    
    var header = "";
    var footer = "";

    Aloha.ready(function() {
        /* the editor is ready, 
           tell the parent window to start render */
        window.parent.renderEditor();
    });

    /* render the wysiwyg editor */
    function renderEditor() {
        var content = $("#content");

        /* render all font tags (text) */
        var fonts = content.find("font");
        for (var i = 0; i < fonts.length; i++) {
            var haveSpan = false;
            var kids = $(fonts[i]).children();
            for (var c = 0; c < kids.length; c++) {
                if (kids[c].tagName == "SPAN") {
                    haveSpan = true;
                    break;
                }
            }

            if (haveSpan == false) {
                var d = $("<span>");
                d.attr("data-edit-link", "true");
                d.html($(fonts[i]).html().trim());
                $(fonts[i]).html("");
                $(fonts[i]).append(d);
            
                Aloha.jQuery(d).aloha();
            }
        }
        
        /* render all a tags (links) */
        var a = content.find("a");
        for (var i = 0; i < a.length; i++) {
            var parent = ($(a[i]).parent()[0] != undefined) ? $(a[i]).parent()[0].tagName : "";         
            var child = ($(a[i]).children()[0] != undefined) ? $(a[i]).children()[0].tagName : "";
            
            if (parent != "SPAN" && child != "IMG") {
                $(a[i]).html($(a[i]).html().trim());
            
                var d = $("<span>");
                d.append($(a[i]).clone());
                d.attr("style", $(a[i]).attr("style"));
                $(a[i]).after(d);
                $(a[i]).remove();
        
                Aloha.jQuery(d).aloha();
            }
        }
        
        /* hover effect */
        $('span[contenteditable="true"]').hover(function() {
            $(this).css("box-shadow", "0 0 8px #444");
        }, function() {
            $(this).css("box-shadow", "");
        });
        
        /* add coloring events to form controls */
        var form_ev = function(name) {
            var pjq = window.parent.$;
            
            pjq("#"+name).focus(function() {
                pjq(".f_a").removeClass("f_a");
                pjq(this).parent().addClass("f_a");
            });

            pjq("#"+name).click(function() {
                pjq(this).focus();
            });

            pjq("#"+name).blur(function() {
                pjq(".f_a").removeClass("f_a");
            });
        };

        /* render all img tags */
        var imgs = content.find('img[editable="true"]');
        for (var i = 0; i < imgs.length; i++) {
            var img = $(imgs[i]);
            img.css("cursor", "pointer");
        
            /* hover effect */
            img.hover(function() {
                $(this).css("box-shadow", "0 0 8px #444");
            }, function() {
                $(this).css("box-shadow", "");
            });
            
            /* edit picture */
            img.click(function() {
                var img = $(this);
                
                var href = "";
                if (img.parent()[0].tagName === "A") {
                    href = img.parent().attr("href");
                }
                
                var holder = $('<div>');
                
                var frame1 = $('<div class="frame"></div>'),
                    label1 = $('<div class="label-1st">Ange URLen till en bild med storleken '+img.attr("width")+'x'+img.attr("height")+'px:</div>'),
                    txtbox1 = $('<input id="pic_url" class="txt" type="text" value="'+img.attr("src")+'">');
                    
                var frame2 = $('<div class="frame"></div>'),
                    label2 = $('<div class="label">Länk:</div>'),
                    txtbox2 = $('<input id="pic_link" class="txt" type="text" value="'+href+'">');
                
                var frame3 = $('<div class="frame"></div>'),
                    label3 = $('<div class="label">Titel (visas när muspekaren hålls över bilden):</div>'),
                    txtbox3 = $('<input id="pic_title" class="txt" type="text" value="'+img.attr("title")+'">');
                
                frame1.append(label1);
                frame1.append(txtbox1);
                
                frame2.append(label2);
                frame2.append(txtbox2);
                
                frame3.append(label3);
                frame3.append(txtbox3);
                
                holder.append(frame1);
                holder.append(frame2);
                holder.append(frame3);
                
                var msgbox = new MessageBox("editpic", {
                    title: "Redigera bild",
                    content: holder.html(),
                    buttons: [
                        {text: "OK", fn: function() {
                            /* set src */
                            img.attr("src", window.parent.$("#pic_url").val());
                            
                            /* set title */
                            img.attr("title", window.parent.$("#pic_title").val());
                            img.attr("alt", window.parent.$("#pic_title").val());
                            
                            /* set link */
                            if (window.parent.$("#pic_link").val().length > 0) {
                                if (img.parent()[0].tagName === "A") {
                                    /* change href */
                                    img.parent().attr("href", window.parent.$("#pic_link").val());
                                } else {
                                    /* wrap the img with an a */
                                    img.attr("border", "0");
                                    
                                    var a = $("<a>");
                                    a.attr("href", window.parent.$("#pic_link").val());
                                    a.append(img.clone());
                                
                                    img.after(a);
                                    img.remove();
                                
                                    /* rerender the editor */
                                    setContent(getContent());
                                }
                            } else if (img.parent()[0].tagName === "A") {
                                /* remove the link */
                                $(img.parent()[0]).after(img.clone());
                                $(img.parent()[0]).remove();
                                
                                /* rerender the editor */
                                setContent(getContent());
                            }
                            
                            msgbox.hide();
                        }, color: "green"},
                        {text: "Avbryt", fn: function()  {
                            msgbox.hide();
                        }}
                    ]
                });
                msgbox.show(window.parent.$("#mainarea"));
                
                /* color the input boxes */
                form_ev("pic_url");
                form_ev("pic_link");
                form_ev("pic_title");

                return false;
            });
        }
    }
    
    /* set html to edit */
    function setContent(html) {
        header = "";
        footer = "";
        
        /* get top (<html>, <body> etc.) */
        var m = /<body.*?>/i.exec(html);
        if (m != null) {
            if (m.length > 0) {
                var a = html.indexOf(m[0]);
                if (a > -1) {
                    header = html.substr(0, a+m[0].length);
                    html = html.substr(header.length, html.length - header.length);
                }
            }
        }
        
        /* get bottom (</html>, </body> etc.) */
        var b = html.search(/<\/body>/i);
        if (b > -1) {
            footer = html.substr(b, html.length - b);
            html = html.substr(0, html.length - footer.length);
        }
    
        /* find all comlang code blocks */
        newhtml = html;
        var cl = html.match(/<#([\s\S]*?)#>/gi);
        if (cl != null) {
            for (var i = 0; i < cl.length; i++) {
                var a = newhtml.indexOf(cl[i]);
                if (a > -1) {
                    var part1 = newhtml.substr(0, a);
                    var part2 = newhtml.substr(a + cl[i].length, newhtml.length - (a + cl[i].length));

                    /* if the comlang code is embedded in another tag,
                       don't modify it */
                    var inTag = false;
                    for (var e = 0; e < part1.length; e++) {
                        var chr = part1[part1.length - e - 1];
                        
                        var nxt = "";
                        if (e < part1.length - 1) {
                            nxt = part1[part1.length - e - 2];
                        }
                        var prv = "";
                        if (e > 0) {
                            prv = part1[part1.length - e];
                        }

                        if (chr == '<' && prv != '#') {
                            inTag = true; /* found start tag */
                            break;
                        } else if (chr == '>' && nxt != '#') {
                            break; /* found end tag */
                        }
                    }

                    if (!inTag) {
                        /* replace the comlang code with a span... */
                        var tmp = $("<div>");
                        var block = $("<span>");
                        block.attr("data-comlang", cl[i].substr(2, cl[i].length - 4));
                        block.addClass("comlang-block").addClass("angled");
                        block.html("&nbsp;");
                        tmp.append(block);

                        newhtml = part1 + tmp.html() + part2;
                    }           
                }
            }
        }

        /* set the content and render it */
        $("#content").html(newhtml);

        /* comlang objects */
        var comlangs = $("#content").find(".comlang-block");
        for (var i = 0; i < comlangs.length; i++) {
            var cl = $(comlangs[i]);

            /* styling */
            var parent = (cl.parent()[0] != undefined) ? cl.parent()[0].tagName : "";
            if (parent != "FONT") {
                cl.css({
                    "display": "block",
                    "width": "100%",
                    "padding": 0
                });
            }

            /* on click */
            cl.click(function() {
                var obj = $(this);
                var cm;

                var holder = $('<div>'),
                txtbox1 = $('<textarea style="width: 100%; height: 210px;" id="comlang_code" class="txt" onclick="$(this).focus();">');

                txtbox1.text(obj.attr("data-comlang"));
                holder.append(txtbox1);

                var msgbox = new MessageBox("editcomlang", {
                    title: "Redigera Comlang-kod",
                    content: holder.html(),
                    buttons: [
                        {text: "OK", fn: function() {
                            cm.save();
                            obj.attr("data-comlang", window.parent.$("#comlang_code").val())
                            
                            msgbox.hide();
                        }, color: "green"},
                        {text: "Avbryt", fn: function()  {
                            msgbox.hide();
                        }}
                    ]
                });
                msgbox.show(window.parent.$("div.wrapper"));

                /* style the comlang code with the CodeMirror Editor */
                cm = window.parent.render_code_textarea("comlang_code");
                var scroller = cm.getScrollerElement();
                scroller.style.height = "200px";
                cm.refresh();
            });
        }

        renderEditor();
    }
    
    /* get the result html */
    function getContent() {
        /* clean the code */
        var html = cleanContent();
        
        html = html.replace(/<tbody>/gi, "");
        html = html.replace(/<\/tbody>/gi, "");
        
        html = html.replace(/&lt;#/gi, "<#");
        html = html.replace(/#&gt;/gi, "#>");

        html = html.replace(/%3C#%20/gi, "<# ");
        html = html.replace(/%20#%3E/gi, " #>");
        html = html.replace(/%3C#/gi, "<#");
        html = html.replace(/#%3E/gi, "#>");
        
        html = html.replace(/&lt;/gi, "<");
        html = html.replace(/&gt;/gi, ">");
        
        html = html.replace(/å/g, "&aring;");
        html = html.replace(/ä/g, "&auml;");
        html = html.replace(/ö/g, "&ouml;");
        
        html = html.replace(/Å/g, "&Aring;");
        html = html.replace(/Ä/g, "&Auml;");
        html = html.replace(/Ö/g, "&Ouml;");
        
        return header + "\n" + html.trim() + "\n" + footer;
    }
    
    /* clean the code */
    function cleanContent() {       
        var d = $("#content").clone();
        
        /* remove aloha link tags */
        var links = d.find(".aloha-link-text");
        for (var i = 0; i < links.length; i++) {
            var a = $(links[i]);            
            a.removeClass("aloha-link-text");
            
            if (a.attr("class") == undefined || a.attr("class").length == 0) {
                a.removeAttr("class");
            }
        }
        
        /* remove aloha tags */
        var alohas = d.find(".aloha-editable");
        for (var i = 0; i < alohas.length; i++) {
            var a = $(alohas[i]);
            
            /* fix styling of links */          
            if (a.parent().length > 0 && a.children().length == 1) {
                var parent = a.parent()[0];         
                var child = a.children()[0];
                
                if (child.tagName == "A") {
                    if (parent.tagName != "FONT") {
                        if (a.attr("style") != undefined) {
                            $(child).attr("style", styleToHex(a.attr("style")));
                        }
                    } else {
                        if ($(parent).attr("style") != undefined) {
                            $(child).attr("style", styleToHex($(parent).attr("style")));
                        }
                    }
                    
                    if ($(child).attr("class") == undefined || $(child).attr("class").length == 0) {
                        $(child).removeAttr("class");
                    }
                }
            }
            
            a.after(a.html());
            a.remove();
        }
        
        /* remove editor img css */
        var imgs = d.find('img[editable="true"]');
        for (var i = 0; i < imgs.length; i++) {
            var img = $(imgs[i]);
            img.css("cursor", "");
            img.css("box-shadow", "");
        }

        /* fix comlang blocks */
        var comlangs = d.find('.comlang-block');
        for (var i = 0; i < comlangs.length; i++) {
            var cl = $(comlangs[i]);
            cl.after("<#" + cl.attr("data-comlang") + "#>");
            cl.remove();
        }

        return d.html();
    }
    
    /* replace rgb() colors to hex colors */
    function styleToHex(style) {
        var rgb = /(.*?)(rgb\(\d+, \d+, \d+\))/.exec(style);
        if (rgb != null) {
            return style.replace(rgb[2], colorToHex(rgb[2]));
        } else {
            return style;
        }
    }
    
    /* rgb to hex */
    function colorToHex(color) {
        if (color.substr(0, 1) === '#') {
            return color;
        }
        
        var digits = /(.*?)rgb\((\d+), (\d+), (\d+)\)/.exec(color);

        var red = parseInt(digits[2]);
        var green = parseInt(digits[3]);
        var blue = parseInt(digits[4]);

        var rgb = blue | (green << 8) | (red << 16);
        return digits[1] + '#' + rgb.toString(16);
    }
</script>

</body>
</html>

